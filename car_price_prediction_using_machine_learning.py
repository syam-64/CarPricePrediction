# -*- coding: utf-8 -*-
"""Car Price Prediction Using Machine Learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sCFTE-jcyFhktOX-hfzQFhV6JnAhfM60

Importing the necessary libraries
"""

import pandas as pd # for data frames such as structured tabular forms
import numpy as np #for mathematical calculation
import matplotlib.pyplot as plt #for data visualization such as ploting
import seaborn as sns #for making statistical graphics
import warnings #for ignoring the warnings
warnings.filterwarnings("ignore")
from sklearn.model_selection import train_test_split # used to split data into training data and test data
from sklearn.linear_model import LinearRegression #importing LinearRegression
from sklearn import metrics #used for calculation the accuracy and error percentage

"""Data Collection and Processing"""

# loading the data from csv file to pandas dataframe
car_dataset = pd.read_csv('/content/car data.csv')

# inspecting the first 10 rows of the dataframe
car_dataset.head(10)

# checking the number of rows and columns
car_dataset.shape

# getting some information about the dataset
car_dataset.info()

# histogram of Selling Prices
sns.histplot(car_dataset['Selling_Price'])

# Countplot of Fuel type
sns.countplot(car_dataset['Fuel_Type'])

# Histogram of Year
sns.histplot(car_dataset['Year'])

# Countplot of Seller Type
sns.countplot(car_dataset['Seller_Type'])

# Countplot of Transmission
sns.countplot(car_dataset['Transmission'])

# checking the number of missing values
car_dataset.isnull().sum()

# checking the distribution of categorical data
print(car_dataset.	Fuel_Type.value_counts()) # checking the number of fuel types
print(car_dataset.Seller_Type.value_counts()) # checking seller type
print(car_dataset.Transmission.value_counts()) # chekicng transmission type

"""Encoding the Categorical Data"""

# encoding "Fuel_Type" Column
car_dataset.replace({'Fuel_Type':{'Petrol':0,'Diesel':1,'CNG':2}},inplace=True)

# encoding "Seller_Type" Column
car_dataset.replace({'Seller_Type':{'Dealer':0,'Individual':1}},inplace=True)

# encoding "Transmission" Column
car_dataset.replace({'Transmission':{'Manual':0,'Automatic':1}},inplace=True)

# The first 5 rows
car_dataset.head()

X = car_dataset.drop(['Car_Name','Selling_Price'],axis=1) # Removing Car_name column Selling Price column
Y = car_dataset['Selling_Price'] # setting the Selling price to Y

print(X) # After removing

print(Y) #Contains Selling Price

# Splitting data into Training and Test data
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, train_size = 0.9, test_size = 0.1, random_state = 10) # TEsting 10% and training 90%

"""Model Training"""

# loading the linear regression model
lin_reg_model = LinearRegression()

#fitting X and Y to linear Refression model
lin_reg_model.fit(X_train,Y_train)

# prediction on Training data
training_data_prediction = lin_reg_model.predict(X_train)

# R squared Error
error_score = metrics.r2_score(Y_train, training_data_prediction)
print("R squared Error in training : ", error_score)

# Plotting
plt.scatter(Y_train, training_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title(" Actual Prices vs Predicted Prices")
plt.show()

# prediction on Training data
test_data_prediction = lin_reg_model.predict(X_test)

# R squared Error
error_score = metrics.r2_score(Y_test, test_data_prediction)
print("R squared Error in test: ", error_score)

# Plotting
plt.scatter(Y_test, test_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title(" Actual Prices vs Predicted Prices")
plt.show()

"""Model Evaluation"""